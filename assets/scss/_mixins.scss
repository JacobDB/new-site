// Styles written by Jacob Bearce | jacob@bearce.me

@import "vendors/media-queries";

@mixin clear {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
    *zoom: 1;
}

@mixin flex-fix {
    .flexbox & {
        float: none;
    }
}

@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

@mixin absolute($args) {
    @include position("absolute", $args);
}

@mixin fixed($args) {
    @include position("fixed", $args);
}

@mixin relative($args) {
    @include position("relative", $args);
}

@mixin placeholder {
    ::-webkit-input-placeholder {@content}
    :-moz-placeholder {@content}
    ::-moz-placeholder {@content}
    :-ms-input-placeholder {@content}
    .placeholder {@content}
}

// rem/em stuff

@mixin background-size($x, $y: null, $base: 16, $unit: rem) {
    @if $y == null {
        background-size: ($x + px);
        background-size: ($x / $base) + $unit;
    } @else {
        background-size: ($x + px) ($y + px);
        background-size: (($x / $base) + $unit) (($y / $base) + $unit);
    }
}

@mixin border($size, $style, $color, $base: 16, $unit: rem) {
    border: ($size + px) $style $color;
    border-width: ($size / $base) + $unit;
}

@mixin border-width($size, $base: 16, $unit: rem) {
    border-width: $size + px;
    border-width: ($size / $base) + $unit;
}

@mixin border-top($size, $style, $color, $base: 16, $unit: rem) {
    border-top: ($size + px) $style $color;
    border-top-width: ($size / $base) + $unit;
}

@mixin border-top-width($size, $base: 16, $unit: rem) {
    border-top-width: $size + px;
    border-top-width: ($size / $base) + $unit;
}

@mixin border-right($size, $style, $color, $base: 16, $unit: rem) {
    border-right: ($size + px) $style $color;
    border-right-width: ($size / $base) + $unit;
}

@mixin border-right-width($size, $base: 16, $unit: rem) {
    border-right-width: $size + px;
    border-right-width: ($size / $base) + $unit;
}

@mixin border-bottom($size, $style, $color, $base: 16, $unit: rem) {
    border-bottom: ($size + px) $style $color;
    border-bottom-width: ($size / $base) + $unit;
}

@mixin border-bottom-width($size, $base: 16, $unit: rem) {
    border-bottom-width: $size + px;
    border-bottom-width: ($size / $base) + $unit;
}

@mixin border-left($size, $style, $color, $base: 16, $unit: rem) {
    border-left: ($size + px) $style $color;
    border-left-width: ($size / $base) + $unit;
}

@mixin border-left-width($size, $base: 16, $unit: rem) {
    border-left-width: $size + px;
    border-left-width: ($size / $base) + $unit;
}

@mixin bottom($size, $base: 16, $unit: rem) {
    bottom: $size + px;
    bottom: ($size / $base) + $unit;
}

@mixin font-size($size, $base: 16, $unit: rem) {
    font-size: $size + px;
    font-size: ($size / $base) + $unit;
}

@mixin height($size, $base: 16, $unit: rem) {
    height: $size + px;
    heihgt: ($size / $base) + $unit;
}

@mixin left($size, $base: 16, $unit: rem) {
    left: $size + px;
    left: ($size / $base) + $unit;
}

@mixin line-height($size, $base: 16, $unit: rem) {
    line-height: $size + px;
    line-height: ($size / $base) + $unit;
}

@mixin margin($top, $right: null, $bottom: null, $left: null, $base: 16, $unit: rem) {
    margin: {
        top: $top + px;
        @if $right != null {
            right: $right + px;
            @if $left == null {
                left: $right + px;
            }
        }
        @if $bottom != null {
            bottom: $bottom + px;
        } @else {
            bottom: $top + px;
        }
        @if $left != null {
            left: $left + px;
        }
        @if $right == null and $bottom == null and $left == null {
            right: $top + px;
            bottom: $top + px;
            left: $top + px;
        }
    }
    margin: {
        top: ($top / $base) + $unit;
        @if $right != null {
            right: ($right / $base) + $unit;
            @if $left == null {
                left: ($right / $base) + $unit;
            }
        }
        @if $bottom != null {
            bottom: ($bottom / $base) + $unit;
        } @else {
            bottom: ($top / $base) + $unit;
        }
        @if $left != null {
            left: ($left / $base) + $unit;
        }
        @if $right == null and $bottom == null and $left == null {
            right: ($top / $base + $unit);
            bottom: ($top / $base) + $unit;
            left: ($top / $base) + $unit;
        }
    }
}

@mixin margin-top($size, $base: 16, $unit: rem) {
    margin-top: $size + px;
    margin-top: ($size / $base) + $unit;
}

@mixin margin-right($size, $base: 16, $unit: rem) {
    margin-right: $size + px;
    margin-right: ($size / $base) + $unit;
}

@mixin margin-bottom($size, $base: 16, $unit: rem) {
    margin-bottom: $size + px;
    margin-bottom: ($size / $base) + $unit;
}

@mixin margin-right($size, $base: 16, $unit: rem) {
    margin-right: $size + px;
    margin-right: ($size / $base) + $unit;
}

@mixin max-height($size, $base: 16, $unit: rem) {
    max-height: $size + px;
    max-height: ($size / $base) + $unit;
}

@mixin max-width($size, $base: 16, $unit: rem) {
    max-width: $size + px;
    max-width: ($size / $base) + $unit;
}

@mixin min-height($size, $base: 16, $unit: rem) {
    min-height: $size + px;
    min-height: ($size / $base) + $unit;
}

@mixin min-width($size, $base: 16, $unit: rem) {
    min-width: $size + px;
    min-width: ($size / $base) + $unit;
}

@mixin padding($top, $right: null, $bottom: null, $left: null, $base: 16, $unit: rem) {
    padding: {
        top: $top + px;
        @if $right != null {
            right: $right + px;
            @if $left == null {
                left: $right + px;
            }
        }
        @if $bottom != null {
            bottom: $bottom + px;
        } @else {
            bottom: $top + px;
        }
        @if $left != null {
            left: $left + px;
        }
        @if $right == null and $bottom == null and $left == null {
            right: $top + px;
            bottom: $top + px;
            left: $top + px;
        }
    }
    padding: {
        top: ($top / $base) + $unit;
        @if $right != null {
            right: ($right / $base) + $unit;
            @if $left == null {
                left: ($right / $base) + $unit;
            }
        }
        @if $bottom != null {
            bottom: ($bottom / $base) + $unit;
        } @else {
            bottom: ($top / $base) + $unit;
        }
        @if $left != null {
            left: ($left / $base) + $unit;
        }
        @if $right == null and $bottom == null and $left == null {
            right: ($top / $base + $unit);
            bottom: ($top / $base) + $unit;
            left: ($top / $base) + $unit;
        }
    }
}

@mixin padding-top($size, $base: 16, $unit: rem) {
    padding-top: $size + px;
    padding-top: ($size / $base) + $unit;
}

@mixin padding-right($size, $base: 16, $unit: rem) {
    padding-right: $size + px;
    padding-right: ($size / $base) + $unit;
}

@mixin padding-bottom($size, $base: 16, $unit: rem) {
    padding-bottom: $size + px;
    padding-bottom: ($size / $base) + $unit;
}

@mixin padding-right($size, $base: 16, $unit: rem) {
    padding-right: $size + px;
    padding-right: ($size / $base) + $unit;
}

@mixin right($size, $base: 16, $unit: rem) {
    right: $size + px;
    right: ($size / $base) + $unit;
}

@mixin top($size, $base: 16, $unit: rem) {
    top: $size + px;
    top: ($size / $base) + $unit;
}

@mixin width($size, $base: 16, $unit: rem) {
    width: $size + px;
    width: ($size / $base) + $unit;
}
