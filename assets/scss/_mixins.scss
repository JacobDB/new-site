// Styles written by Jacob Bearce | jacob@bearce.me

@import "vendors/media-queries";

/*
 * ------------------------------------------------------------------------
 * Clear Fix
 * ------------------------------------------------------------------------
 */

@mixin clear {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
    *zoom: 1;
}

/*
 * ------------------------------------------------------------------------
 * Flex Fix for Safari
 * ------------------------------------------------------------------------
 */

@mixin flex-fix {
    .flexbox & {
        float: none;
    }
}

/*
 * ------------------------------------------------------------------------
 * Placeholders
 * ------------------------------------------------------------------------
 */

@mixin placeholder {
    ::-webkit-input-placeholder {@content}
    :-moz-placeholder {@content}
    ::-moz-placeholder {@content}
    :-ms-input-placeholder {@content}
    .placeholder {@content}
}

/*
 * ------------------------------------------------------------------------
 * Quantity Queries
 * ------------------------------------------------------------------------
 */

&:nth-last-child(#{$nth}):first-child {
    &,
    & ~ * {
        @content;
    }
}

@mixin qq-equal($number) {
  @include quantity-query($number, equal) {
    @content;
  }
}

@mixin qq-greater($number) {
    @include quantity-query($number, greater) {
        @content;
    }
}

@mixin qq-less($number) {
    @include quantity-query($number, less) {
        @content;
    }
}

/*
 * ------------------------------------------------------------------------
 * REM/EM
 * ------------------------------------------------------------------------
 */

// background

@mixin background-size($x, $y: null, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    @if $y == null {
        background-size: ($x + px);
        background-size: ($x / $base) + $unit;
    } @else {
        background-size: ($x + px) ($y + px);
        background-size: (($x / $base) + $unit) (($y / $base) + $unit);
    }
}

// border

@mixin border($size, $style, $color, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    border: ($size + px) $style $color;
    border-width: ($size / $base) + $unit;
}

// border radius

@mixin border-radius($sizes: ($top-left, $top-right, $bottom-right, $bottom-left), $base: null, $unit: null) {
    $value-px: null;
    $value-rem: null;
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    @each $size in $sizes {
        @if $value-px == null {
            $value-px: $size + px;
        } @else {
            $value-px: $value-px + " " + ($size + px);
        }

        @if $value-rem == null {
            $value-rem: ($size / $base) + $unit;
        } @else {
            $value-rem: $value-rem + " " + (($size / $base) + $unit);
        }
    }
    border-radius: $value-px;
    border-radius: $value-rem;
}

// box shadow

@mixin box-shadow($sizes: ($x, $y, $blur, $spread), $color: #000, $base: null, $unit: null) {
    $value-px: null;
    $value-rem: null;
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    @each $size in $sizes {
        @if $value-px == null {
            $value-px: $size + px;
        } @else {
            $value-px: $value-px + " " + ($size + px);
        }

        @if $value-rem == null {
            $value-rem: ($size / $base) + $unit;
        } @else {
            $value-rem: $value-rem + " " + (($size / $base) + $unit);
        }
    }
    box-shadow: $value-px $color;
    box-shadow: $value-rem $color;
}

// font

@mixin font-size($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    font-size: $size + px;
    font-size: ($size / $base) + $unit;
}

@mixin line-height($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    line-height: $size + px;
    line-height: ($size / $base) + $unit;
}

// margin

@mixin margin($sizes: ($top, $right, $bottom, $left), $base: null, $unit: null) {
    $value-px: null;
    $value-rem: null;
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    @each $size in $sizes {
        @if $value-px == null {
            $value-px: $size + px;
        } @else {
            $value-px: $value-px + " " + ($size + px);
        }

        @if $value-rem == null {
            $value-rem: ($size / $base) + $unit;
        } @else {
            $value-rem: $value-rem + " " + (($size / $base) + $unit);
        }
    }
    margin: $value-px;
    margin: $value-rem;
}

// padding

@mixin padding($sizes: ($top, $right, $bottom, $left), $base: null, $unit: null) {
    $value-px: null;
    $value-rem: null;
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    @each $size in $sizes {
        @if $value-px == null {
            $value-px: $size + px;
        } @else {
            $value-px: $value-px + " " + ($size + px);
        }

        @if $value-rem == null {
            $value-rem: ($size / $base) + $unit;
        } @else {
            $value-rem: $value-rem + " " + (($size / $base) + $unit);
        }
    }
    padding: $value-px;
    padding: $value-rem;
}

// position

@mixin top($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    top: $size + px;
    top: ($size / $base) + $unit;
}

@mixin right($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    right: $size + px;
    right: ($size / $base) + $unit;
}

@mixin bottom($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    bottom: $size + px;
    bottom: ($size / $base) + $unit;
}

@mixin left($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    left: $size + px;
    left: ($size / $base) + $unit;
}

// size

@mixin height($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    height: $size + px;
    height: ($size / $base) + $unit;
}

@mixin max-height($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    max-height: $size + px;
    max-height: ($size / $base) + $unit;
}

@mixin min-height($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    min-height: $size + px;
    min-height: ($size / $base) + $unit;
}

@mixin width($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    width: $size + px;
    width: ($size / $base) + $unit;
}

@mixin max-width($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    max-width: $size + px;
    max-width: ($size / $base) + $unit;
}

@mixin min-width($size, $base: null, $unit: null) {
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    min-width: $size + px;
    min-width: ($size / $base) + $unit;
}

// text-shadow

@mixin text-shadow($sizes: ($x, $y, $blur), $color: #000, $base: null, $unit: null) {
    $value-px: null;
    $value-rem: null;
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    @each $size in $sizes {
        @if $value-px == null {
            $value-px: $size + px;
        } @else {
            $value-px: $value-px + " " + ($size + px);
        }

        @if $value-rem == null {
            $value-rem: ($size / $base) + $unit;
        } @else {
            $value-rem: $value-rem + " " + (($size / $base) + $unit);
        }
    }
    text-shadow: $value-px $color;
    text-shadow: $value-rem $color;
}

// other

@mixin remify($property, $sizes: ($first, $second, $third, $fourth), $additional: null, $base: null, $unit: null) {
    $value-px: null;
    $value-rem: null;
    @if $base == null {
        $base: 16;
        @if $unit == null {
            $unit: rem;
        }
    } @else {
        @if $unit == null {
            $unit: em;
        }
    }
    @each $size in $sizes {
        @if $value-px == null {
            $value-px: $size + px;
        } @else {
            $value-px: $value-px + " " + ($size + px);
        }

        @if $value-rem == null {
            $value-rem: ($size / $base) + $unit;
        } @else {
            $value-rem: $value-rem + " " + (($size / $base) + $unit);
        }
    }
    #{$property}: $value-px $additional;
    #{$property}: $value-rem $additional;
}
