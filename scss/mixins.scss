// Styles written by Jacob Bearce | jacob@bearce.me

@import "media-queries";

@mixin clear {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
    *zoom: 1;
}

@mixin flex-fix {
    .flexbox & {
        float: none;
    }
}

@mixin retina($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
        background-image: url($image);
        background-size: $width $height;
    }
}

@mixin font-size($size: 24, $base: 16, $unit: rem) {
    font-size: $size + px;
    font-size: ($size / $base) + $unit;
}

@mixin line-height($line-height, $base: 16, $unit: em) {
    line-height: $line-height + px;
    line-height: ($line-height / $base) + $unit;
}

@mixin margin($top: 0, $right: 0, $bottom: 0, $left: 0, $base: 16, $unit: em) {
    margin: ($top + px) ($right + px) ($bottom + px) ($left + px);
    margin: (($top / $base) + $unit) (($right / $base) + $unit) (($bottom / $base) + $unit) (($left / $base) + $unit);
}

@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

@mixin absolute($args) {
    @include position("absolute", $args);
}

@mixin fixed($args) {
    @include position("fixed", $args);
}

@mixin relative($args) {
    @include position("relative", $args);
}

@mixin placeholder {
    ::-webkit-input-placeholder {@content}
    :-moz-placeholder {@content}
    ::-moz-placeholder {@content}
    :-ms-input-placeholder {@content}
    .placeholder {@content}
}
